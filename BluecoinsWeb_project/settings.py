"""
Django settings for BluecoinsWeb_project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import glob
import os
from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def find_bluecoins_database():
    """
    Find the most recent bluecoins database file in the specified directory.
    Returns the path to the database file that starts with 'bluecoins' and ends with '.fydb'
    """
    # Directory where bluecoins databases are stored (For example, Google Drive for PC)
    #bluecoins_dir = r'C:/Users/JuliansCastro/Mi unidad/Bluecoins/QuickSync/'
    
    # If the above path doesn't exist, fallback to local database
    bluecoins_dir = BASE_DIR / 'databases/'
    
    # Pattern to match bluecoins*.fydb files
    pattern = os.path.join(bluecoins_dir, 'bluecoins*.fydb')
    
    # Find all matching files
    matching_files = glob.glob(pattern)
    
    if not matching_files:
        # Fallback to local database if no files found
        print(f"Warning: No bluecoins database found in {bluecoins_dir}")
        print("Falling back to local database")
        return BASE_DIR / 'databases/bluecoins.fydb'
    
    # Sort files by modification time (most recent first)
    matching_files.sort(key=os.path.getmtime, reverse=True)
    
    # Return the most recent file
    latest_file = matching_files[0]
    print(f"Using bluecoins database: {latest_file}\n")
    return latest_file


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

# ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",  # app for human-readable numbers
    "BluecoinsWeb_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "BluecoinsWeb_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "BluecoinsWeb_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # Default Database (Django)
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'databases/bluecoins_admin.db',  # the DB that Django will manage for users, auth, etc.
    },    # Bluecoins Database (for your original backup)
    'bluecoins': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': find_bluecoins_database(),  # Dynamically find the most recent bluecoins database in app backup locations
    }
}

DATABASE_ROUTERS = [
    'BluecoinsWeb_app.dbrouters.BluecoinsDBRouter',
]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

# Directory where collected static files will be stored
STATIC_ROOT = BASE_DIR / "staticfiles"

# Additional directories where Django will search for static files
STATICFILES_DIRS = [
    # BASE_DIR / "static",  # This directory doesn't exist, so commented out to avoid warnings
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
